import logging
from aiogram import Bot, Dispatcher, types
from aiogram.utils import executor
from aiogram.contrib.middlewares.logging import LoggingMiddleware
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from state import *
from buttons import *

TELEGRAM_TOKEN = "7428826678:AAGEX0_5eCKhxX9lLvVmPQlu2zr_txfb29w"
bot = Bot(token=TELEGRAM_TOKEN)
dp = Dispatcher(bot)

dp.middleware.setup(LoggingMiddleware())

logging.basicConfig(level=logging.INFO)

@dp.message_handler(commands=["start"])
async def send_welcome(message: types.Message):
    await message.reply(
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ Aiogram 2.25.1! üõ†Ô∏è\n"
        "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        "/docs - –û–±—â–∞—è –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è\n"
        "/examples - –ü—Ä–∏–º–µ—Ä—ã –∫–æ–¥–∞\n"
        "/faq - –ß–∞—Å—Ç–æ –∑–∞–¥–∞–≤–∞–µ–º—ã–µ –≤–æ–ø—Ä–æ—Å—ã\n"
        "/search <–∑–∞–ø—Ä–æ—Å> - –ü–æ–∏—Å–∫ –≤ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏"
    )

@dp.message_handler(commands=["docs"])
async def send_docs(message: types.Message):
    await message.reply("–û—Ñ–∏—Ü–∏–∞–ª—å–Ω–∞—è –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è: https://docs.aiogram.dev/en/2.25.1/")

@dp.message_handler(commands=["examples"])
async def send_examples(message: types.Message):
    await message.reply("–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–∏–º–µ—Ä, —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å –∫–æ–¥:", reply_markup=get_example_buttons())

@dp.callback_query_handler(lambda c: c.data.startswith("example_"))
async def handle_examples(callback_query: types.CallbackQuery):
    examples = {
        "example_create_bot": "–ü—Ä–∏–º–µ—Ä —Å–æ–∑–¥–∞–Ω–∏—è –±–æ—Ç–∞:\n\n"
                              "```python\n"
                              "from aiogram import Bot, Dispatcher\n\n"
                              "bot = Bot(token='YOUR_TOKEN')\n"
                              "dp = Dispatcher(bot)\n"
                              "```",
        "example_callback": "–ü—Ä–∏–º–µ—Ä –æ–±—Ä–∞–±–æ—Ç–∫–∏ CallbackQuery:\n\n"
                            "```python\n"
                            "@dp.callback_query_handler(lambda c: c.data == 'button_click')\n"
                            "async def process_callback(callback_query: types.CallbackQuery):\n"
                            "    await bot.answer_callback_query(callback_query.id)\n"
                            "    await callback_query.message.reply('–ö–Ω–æ–ø–∫–∞ –Ω–∞–∂–∞—Ç–∞!')\n"
                            "```",
        "example_middleware": "–ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è Middleware:\n\n"
                              "```python\n"
                              "from aiogram.dispatcher.middlewares import BaseMiddleware\n\n"
                              "class ExampleMiddleware(BaseMiddleware):\n"
                              "    async def on_pre_process_update(self, update, data):\n"
                              "        print('Middleware —Å—Ä–∞–±–æ—Ç–∞–ª!')\n\n"
                              "dp.middleware.setup(ExampleMiddleware())\n"
                              "```",
    }
    code = examples.get(callback_query.data)
    if code:
        await callback_query.message.reply(code, parse_mode="Markdown")
    await bot.answer_callback_query(callback_query.id)

@dp.message_handler(commands=["faq"])
async def send_faq(message: types.Message):
    await message.reply(
        "–ß–∞—Å—Ç–æ –∑–∞–¥–∞–≤–∞–µ–º—ã–µ –≤–æ–ø—Ä–æ—Å—ã:\n"
        "1. **–ö–∞–∫ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å Aiogram?**\n"
        "   ```bash\n"
        "   pip install aiogram==2.25.1\n"
        "   ```\n"
        "2. **–ì–¥–µ –Ω–∞–π—Ç–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—é?**\n"
        "   [–î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è](https://docs.aiogram.dev/en/2.25.1/)\n"
        "3. **–ö–∞–∫–∏–µ –≤–µ—Ä—Å–∏–∏ Python –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è?**\n"
        "   Aiogram 2.25.1 –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç Python 3.7+."
    )

@dp.message_handler(commands=["search"])
async def search_docs(message: types.Message):
    query = message.get_args()
    if not query:
        await message.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∑–∞–ø—Ä–æ—Å, –Ω–∞–ø—Ä–∏–º–µ—Ä:\n/search Dispatcher")
        return
    search_url = f"https://docs.aiogram.dev/en/2.25.1/search.html?q={query}"
    await message.reply(f"–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞ –¥–ª—è '{query}':\n{search_url}")

@dp.message_handler(commands='start', state='*')
async def start_form(message: types.Message):
    await Form.name.set()
    await message.reply("–ö–∞–∫ —Ç–µ–±—è –∑–æ–≤—É—Ç?")

@dp.message_handler(state=Form.name)
async def process_name(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['name'] = message.text
    await Form.next()
    await message.reply("–°–∫–æ–ª—å–∫–æ —Ç–µ–±–µ –ª–µ—Ç?")

@dp.message_handler(state=Form.age)
async def process_age(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['age'] = message.text
    await message.reply(f"–¢–µ–±—è –∑–æ–≤—É—Ç {data['name']} –∏ —Ç–µ–±–µ {data['age']} –ª–µ—Ç!")
    await state.finish()

@dp.errors_handler()
async def error_handler(update, exception):
    logging.error(f"Error: {exception}")
    return True

@dp.message_handler(commands=["help"])
async def help_command(message: types.Message):
    await message.reply("–í–æ—Ç —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥:\n"
                         "/start - –ù–∞—á–∞—Ç—å\n"
                         "/docs - –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è\n"
                         "/examples - –ü—Ä–∏–º–µ—Ä—ã\n"
                         "/faq - –ß–∞—Å—Ç–æ –∑–∞–¥–∞–≤–∞–µ–º—ã–µ –≤–æ–ø—Ä–æ—Å—ã\n"
                         "/search - –ü–æ–∏—Å–∫ –≤ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏\n"
                         "/help - –ü–æ–º–æ—â—å")

@dp.message_handler(commands=["contact"])
async def contact_command(message: types.Message):
    await message.reply("–î–ª—è —Å–≤—è–∑–∏ —Å –Ω–∞–º–∏, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ –Ω–∞ email: support@aiogram.com")

@dp.message_handler(commands=["version"])
async def version_command(message: types.Message):
    await message.reply("–í—ã –∏—Å–ø–æ–ª—å–∑—É–µ—Ç–µ Aiogram –≤–µ—Ä—Å–∏–∏ 2.25.1")

@dp.message_handler(commands=["info"])
async def info_command(message: types.Message):
    await message.reply("–≠—Ç–æ –±–æ—Ç –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –±–∏–±–ª–∏–æ—Ç–µ–∫–µ Aiogram. –ù–∞–ø–∏—à–∏—Ç–µ /help –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥.")

@dp.message_handler(commands=["news"])
async def news_command(message: types.Message):
    await message.reply("–ù–æ–≤–æ—Å—Ç–µ–π –ø–æ–∫–∞ –Ω–µ—Ç, —Å–ª–µ–¥–∏—Ç–µ –∑–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è–º–∏ –Ω–∞ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ–º —Å–∞–π—Ç–µ.")

@dp.message_handler(commands=["changelog"])
async def changelog_command(message: types.Message):
    await message.reply("–ò–∑–º–µ–Ω–µ–Ω–∏—è –≤ –≤–µ—Ä—Å–∏–∏ 2.25.1:\n- –£–ª—É—á—à–µ–Ω–Ω–∞—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å\n- –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±–∞–≥–æ–≤\n- –û–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏")

@dp.message_handler(commands=["tutorial"])
async def tutorial_command(message: types.Message):
    await message.reply("–ü–æ—Å–º–æ—Ç—Ä–∏—Ç–µ –Ω–∞—à –æ–±—É—á–∞—é—â–∏–π –∫—É—Ä—Å –ø–æ Aiogram: https://docs.aiogram.dev/en/2.25.1/tutorial/")

@dp.message_handler(commands=["community"])
async def community_command(message: types.Message):
    await message.reply("–ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è–π—Ç–µ—Å—å –∫ –Ω–∞—à–µ–º—É —Å–æ–æ–±—â–µ—Å—Ç–≤—É –Ω–∞ GitHub –∏ Discord!\n"
                         "GitHub: https://github.com/aiogram/aiogram\n"
                         "Discord: https://discord.gg/aiogram")

@dp.message_handler(commands=["donate"])
async def donate_command(message: types.Message):
    await message.reply("–ü–æ–¥–¥–µ—Ä–∂–∏—Ç–µ –ø—Ä–æ–µ–∫—Ç Aiogram, —Å–¥–µ–ª–∞–≤ –ø–æ–∂–µ—Ä—Ç–≤–æ–≤–∞–Ω–∏–µ: https://aiogram.dev/donate")

@dp.message_handler(commands=["feedback"])
async def feedback_command(message: types.Message):
    await message.reply("–ú—ã —Ü–µ–Ω–∏–º –≤–∞—à –æ—Ç–∑—ã–≤! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Å—Ç–∞–≤—å—Ç–µ –µ–≥–æ –Ω–∞ –Ω–∞—à–µ–º GitHub –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ –Ω–∞ email.")

if __name__ == "__main__":
    executor.start_polling(dp, skip_updates=True)
